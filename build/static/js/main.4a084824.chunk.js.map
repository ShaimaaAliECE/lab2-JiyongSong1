{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","rows","columns","moves","currentPlayer","reset","setState","winner","checkWin","x","y","player","xScore","yScore","column","check","getPiece","row","filter","item","makeMove","nextPlayer","concat","this","rowView","columnView","piece","push","onClick","style","width","height","backgroundColor","display","padding","borderRadius","flex","undefined","flexDirection","position","left","right","bottom","top","zIndex","justifyContent","alignItems","color","fontSize","props","Object","assign","styles","container","renderBoard","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a084824.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\n\nexport default class App extends React.Component{\n  state = {\n    rows: 6,\n    columns: 7,\n    moves: [],\n    currentPlayer: 'red',\n  };\n\n  //reset function\n  reset = () => {\n    this.setState({moves: [], winner: null });\n  }\n\n  //check for win\n  checkWin = (x, y, player) => {\n    let xScore = 1;\n    let yScore = 1;\n\n    //right horizontal win\n    for (let column = x + 1; column < x + 4; column++){\n      const check = this.getPiece (column, y);\n      if (check && check.player === player){\n        xScore++;\n      }\n      else {\n        break;\n      }\n    }\n    //left horizontal win\n    for (let column = x - 1; column > x - 4; column--){\n      const check = this.getPiece (column, y);\n      if (check && check.player === player){\n        xScore++;\n      }\n      else {\n        break;\n      }\n    }\n    //win if there are 4 pieces in a row\n    if (xScore >= 4){\n      this.setState ({winner: player});\n      return true;\n    }\n\n    //upside vertical win\n    for (let row = y + 1; row < y + 4; row++){\n      const check = this.getPiece (x, row);\n      if (check && check.player === player){\n        yScore++;\n      }\n      else {\n        break;\n      }\n    }\n    //downward vertical win\n    for (let row = y - 1; row > y - 4; row--){\n      const check = this.getPiece (x, row);\n      if (check && check.player === player){\n        yScore++;\n      }\n      else {\n        break;\n      }\n    }\n    //win if there are 4 pieces in a row\n    if (yScore >= 4){\n      this.setState ({winner: player});\n      return true;\n    }\n  }\n\n  //function to get the piece\n  getPiece = (x, y) => {\n    const list = this.state.moves.filter ((item) => {\n      return (item.x === x && item.y === y);\n    });\n    return list[0];\n  }\n\n  //function to place the piece\n  makeMove = (x, y) => {\n    const { currentPlayer } = this.state;\n    //next player is yellow if current player is red, otherwise next player is red by default\n    const nextPlayer = currentPlayer === 'red' ? 'yellow' : 'red';\n    //must check for a win at each move\n    this.setState({moves: this.state.moves.concat({x, y, player: currentPlayer }), currentPlayer: nextPlayer}, () => this.checkWin(x, y, currentPlayer));\n  }\n\n  //the board\n  renderBoard(){\n    const { rows, columns, winner } = this.state;\n    const rowView = [];\n\n    //create the columns and rows\n    for (let row = 0; row < this.state.rows; row++){\n      const columnView = [];\n\n      for (let column = 0; column < this.state.columns; column++){\n        const piece = this.getPiece(column, row);\n\n        //displays the pieces when user clicks on them\n        columnView.push(\n          <div onClick={() => {this.makeMove(column,row)}} style={{width: '6vw', height: '6vw', backgroundColor: '#87ceeb', display: 'flex', padding: 3}}>\n            <div style={{borderRadius: '50%', backgroundColor: 'white', flex: 1, display: 'flex'}}>\n              {piece ? <div style = {{backgroundColor: piece.player, flex: 1, borderRadius: '50%'}}/> : undefined}\n            </div>\n          </div>\n        );\n      }\n      rowView.push(\n        <div style = {{display: 'flex', flexDirection: 'row' }}>{columnView}</div>\n      );\n    }\n\n    return(\n      //displays the winner\n      <div style={{backgroundColor: 'red', display: 'flex', flexDirection: 'column' }}>        \n        {winner && <div onClick = {this.reset} style={{position: 'absolute', left: 0, right: 0, bottom: 0, top: 0, zIndex: 3, backgroundColor: 'rgba(0, 150, 0, .3)', display: 'flex', justifyContent: 'center', alignItems: 'center', color: 'black', fontSize: '5vw'}}>{winner} WINS</div>}\n        {rowView}\n      </div>\n    );\n  }\n\n  props: { style: any; };\n  render() {\n    const { style } = this.props;\n\n    return (\n      <div style={style ? Object.assign({}, styles.container, style) : styles.container}>\n        <div>\n          {this.renderBoard()}\n        </div>        \n      </div>\n    );\n  }\n}\n\nconst styles = {\n  container: {\n    height: '100%',\n    padding: 5,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}